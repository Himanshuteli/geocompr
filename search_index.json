[
["index.html", "Geocomputation with R Welcome Development Reproducibility", " Geocomputation with R Robin Lovelace Jakub Nowosad 2017-07-09 Welcome Welcome to geocompr the website of our forthcoming book with CRC Press. Development Inspired by the bookdown R package we are developing this book in the open. We decided to make the book open source to encourage contributions, ensure reproducibility and provide access to the material as it evolves. We’re developing the book in 3 main phases. We’re in phase 1 and focussed on the first 5 main chapters, which we aim to be complete by September. Drafts of other chapters will be added to this website as the project progresses. The latest version is hosted at robinlovelace.net/geocompr. This website is kept up-to-date thanks to Travis, a continuous integration (CI) service. Travis automatically rebuilds the book and finds bugs by reporting the ‘build status’ after every update. Currently the build is: The version of the book you are reading now was built on 2017-07-09 and was built on Travis. bookdown makes editing a book as easy as editing a wiki. To do so, just click on the ‘edit me’ icon highlighted in the image below. Which-ever chapter you are looking at, this will take you to the source R Markdown file hosted on GitHub. If you have a GitHub account, you’ll be able to make changes there and submit a pull request. If you do not, it’s time to sign-up! To raise an issue about the book’s content (e.g. code not running) or make a feature request, check-out the issue tracker. Reproducibility To reproduce the book, you need a recent version of R and up-to-date packages. The following code should install the required packages: if(!require(devtools)) { install.packages(&quot;devtools&quot;) } devtools::install_github(&quot;robinlovelace/geocompr&quot;) To build the book locally, clone or download the repo and run the following line from the project’s root directory: bookdown::render_book(&quot;index.Rmd&quot;) # to build the book browseURL(&quot;_book/index.html&quot;) # to view it For further details see the book’s GitHub page at Robinlovelace/geocompr. "],
["intro.html", "1 Introduction 1.1 Why Geocomputation with R? 1.2 R’s spatial ecosystem 1.3 The history of geocomputing with R 1.4 Exercises", " 1 Introduction This book exists at the intersection between Geography and R (Figure 1.1). Suggested titles were Geography with R and R for GIS, each of which has advantages. The former conveys the message that it’s not just about spatial data: non-spatial attribute data are inevitably interwoven with geometry data, and Geography is about more than where something is on the map. The latter option communicates that this is a book about using R as a Geographic Information System (GIS), to perform spatial operations on geographic data (Bivand, Pebesma, and Gómez-Rubio 2013). However, the term GIS has some negative connotations (see Table 1.1) and fails to communicate one of R’s greatest strengths: its unparalleled ability to seamlessly switch between geographic and non-geographic data processing, modeling and visualization tasks. Figure 1.1: Venn diagram of the intersection between Geography and R. The title was chosen because this book is about more than routine spatial data processing. What defines geocomputation as a development on previous work is the “creative and experimental use of GIS that it entails” (Longley et al. 1998). Another advantage of the term is that it conveys the centrality of the concept of algorithms (which can be implemented in R functions) to advanced geographical research. This is captured in the following quote from another seminal book on the subject (Openshaw and Abrahart 2000): GeoComputation is about using the various different types of geodata and about developing relevant geo-tools within the overall context of a ‘scientific’ approach. Thus geocomputation is not just about using existing tools, but creating new ones. R is a functional language (Wickham 2014). It has many ‘bridges’ that allow access to a treasure trove of GIS algorithms. It is thus ideal for quickly creating ‘geo-tools’, without needing to master low level languages such as C, FORTRAN and Java. But geocomputation is not just about the methods and code: it is about doing “practical work that is beneficial or useful” (Openshaw and Abrahart 2000). After reading this book you should be able to do more than just understand geocomputational methods or follow the reproducible examples implemented in code chunks in each chapter. This book is about doing geocomputation. This means applying the methods you have learned (and skills you will master) on real-world data to solve pressing problems for social and environmental benefit. Geocomputation is a relatively young field1 but algorithms published under the geocomputational banner have influenced the direction of geographical research, as we will see in subsequent chapters. Algorithms are powerful tools that can become highly complex. However, all algorithms are composed of smaller parts. By teaching these foundations we aim to empower you to create your own solutions to geographic data problems. This can feel like breaking free from the metaphorical ‘glass ceiling’ imposed by GUI-based proprietary geographic information systems (see Table 1.1 for a definition of GUI). While embracing recent developments in the field, we also wanted to pay respects to the wider field of Geography, and its 2000 year history (Roller 2010), of which geocomputation is a part. Geography has played an important role in explaining and influencing humanity’s relationship with the natural world and this book aims to be a part of the ‘Geographic tradition’. Geocomputation in this book therefore means more than simply analyzing geographic data on a computer. It’s about trying to make research which involves making geographic data more reproducible, scientific and socially beneficial. This book is also part of the movement towards Geographic Data Science (GDS) which differs from GIS in several ways, some of which are outlined in Table 1.1. Inspired by the emphasis of GDS research on reproducible research, this book aims to teach how to do geocomputation rather than just think about it. Table 1.1: Differences in emphasis between the fields of Geographic Information Systems (GIS) and Geographic Data Science (GDS). Attribute GIS GDS Home disciplines Geography Geography, Computing, Statistics Software focus Graphical User Interface Code Reproduciblility Minimal Maximal 1.1 Why Geocomputation with R? In this book we treat R as a ‘tool for the trade’. Early geographers used a variety of tools including rulers, compasses and sextants to advance knowledge about the world. It is important to remember that while R is a powerful tool, especially when interfaced with other software such as GDAL and PostGIS, other tools may be better for certain tasks. R is characterized by its flexibility, enabling geographical software developers to extend it in multiple ways. A good example of this is support for generating interactive maps thanks to leaflet (Cheng, Karambelkar, and Xie 2017), which has been subsequently built-on by tmap and mapview (Tennekes 2017; Appelhans et al. 2017). These packages help overcome the criticism that R has “limited interactive [plotting] facilities” (Bivand, Pebesma, and Gómez-Rubio 2013). This is no longer true, as illustrated by the code below which generates Figure 1.2. library(leaflet) popup = c(&quot;Robin&quot;, &quot;Jakub&quot;) leaflet() %&gt;% addProviderTiles(&quot;NASAGIBS.ViirsEarthAtNight2012&quot;) %&gt;% addAwesomeMarkers(lng = c(-3, 23), lat = c(52, 53), popup = popup) Figure 1.2: World at night imagery from NASA overlaid by the authors’ approximate home locations to illustrate interactive mapping with R. It would be difficult to produce Figure 1.2 with only 4 lines of code in another language, let alone embed the results in an interactive html page (the interactive version can be viewed at robinlovelace.net/geocompr), illustrating R’s flexibility. R provides a stable language that behaves consistently across multiple computers, free of charge. The use of R code therefore enables teaching geocomputation with reference to reproducible examples such as that provided in 1.2 rather than abstract concepts. But before cracking-on with the action, a few introductory remarks are needed to explain the approach taken here and provide context. 1.2 R’s spatial ecosystem sf + raster/stars + leaflet/mapview (the recent state of spatial R); the history of R spatial is way longer --> This book teaches Geocomputational techniques using an ecosystem of R packages that in many ways supersede their predecessors in terms of speed and performance. This evolution is common in open source software: because all the code is open, developers can learn from the experiences of prior work, ‘standing on the shoulders of giants’, as Isaac Newton put it in 1675, rather than constantly reinventing the wheel. In the context of spatial vector data classes in R, this can be clearly seen in the evolution of the sf package which in many ways evolved from the earlier sp package. R’s evolving spatial ecosystem should also be understood in the context of developments in the wider R community. The visualisation and data processing packages ggplot2 and dplyr (released on CRAN in 2007 and 2014 respectively) exemplify these shifts. These and other packages written by Hadley Wickham and collaborators share a common style, with a focus on ‘tidy data’ (hence the emergence of the term ‘Hadleyverse’ in 2013). For ease of installation and to harmonize packages in this style, the tidyverse ‘metapackage’ was released in late 2016. Although there is no equivalent sfverse, there are a growing number of actively developed package which use sf (Table 1.2) and discussion of harmonization among R’s many spatial packages.2 Table 1.2: The top 5 most downloaded packages that depend on sf, in terms of average number of downloads per day over the previous month. As of 2017-07-06 there are 18 packages which import sf. package Downloads plotly 1669 leaflet 525 mapview 183 geojsonio 138 tigris 106 A surge in development time (and interest) in ‘R-Geo’ has followed the award of a grant by the R Consortium for the development of support for Simple Features and the resulting sf package (covered in 2.1.1). This is illustrated in multiple places, not least the R-sig-Geo Archives, a long-standing open access email list containing much R-spatial wisdom accumulated over the years. Many posts on the list now discuss sf and related packages, suggesting that R’s spatial software developers are using the package and, therefore, it is here to stay. We will see in the next chapter how Simple Features in R work and their many advantages. We propose that the release of sf heralds a new era for spatial data analysis and geocomputation in R. This era (which we refrain from labelling the sfverse with any seriousness, awaiting a better name!) clearly has the wind in its sails and is set to dominate future developments in R’s spatial ecosystem for years to come. So time invested in learning the ‘new ways’ of handling spatial data and, hopefully, reading this book, is well spent! Figure 1.3: The popularity of spatial packages in R. The y axis shows the average number of downloads, within a 30 day rolling window, of R’s top 5 spatial packages, defined as those with the highest number of downloads within the last 30 days. This book focuses on the ‘new’ way of doing geocomputation for practical purposes and to ensure that what you learn here is ‘future-proof’. There is one caveat to this, however: younger packages are generally less stable and may undergo changes to the way they function or (more commonly) add more features. In other words: If you live on the cutting edge you risk getting hurt. It is therefore worth being aware of the history of the development of spatial data functionality in R. This not only because the incumbent packages are highly mature: there is a wealth of functions, use-cases and teaching material written using older packages in R’s spatial ecosystem, so it’s worth being aware of the history preceding the rise of sf depicted in Figure 1.3. 1.3 The history of geocomputing with R In the volume 1/2 of R News (the predecessor of The R Journal), Brian Ripley created an overview of the spatial statistics state in June 2001 (Ripley 2001). He shortly described eight packages, mostly used for spatial smoothing end interpolation (such as akima, spatial, sgeostat and geoR) and spatial point patterns (splancs and spatstat). Most of these packages where based on the previous code written for S or S-PLUS. The last mentioned package, spatstat became a standard for analyzing spatial point patterns. However, most of this topic goes beyond the scope of this book, so for more information we recommend the book of Baddeley, Rubak, and Turner (2015). In the next issue of R News, Bivand (2001) gave an introduction to the splanc package and suggested some future prospects. The most notably, he mentioned the need for standardized R spatial interface, more efficient mechanisms for exchanging data with GIS, and better ways to treat spatial metadata (such as spatial projections). Two years later, he presented an extended review of existing R spatial packages at the 3rd International Workshop on Distributed Statistical Computing (DSC 2003) (Bivand 2003). At this stage, R spatial development started to be connected with the advancement in spatial software libraries, especially the Geospatial Data Abstraction Library (GDAL) and PROJ.4. They allow reading and writing vector and raster data formats, and conversions between coordinate reference systems. Based on the data types offered by GDAL, Bivand also proposed a basis for spatial data classes in R, with the fundamental types of spatial data highlighted - point, line, polygon and raster. This idea was converted into a reality with creation of two, very closely connected R packages - rgdal and sp. The first one, rgdal was released on CRAN in 2003 and provided an interface to GDAL and the PROJ.4 libraries. It gave unmatched abilities to read and write dozens of different spatial data formats. Importantly, it also was able to keep an information about coordinate reference system and allowed for map projection and datum transformation. The second one, sp, was created in 2003-2004 and its first version was released in 2005. This package was an answer to the major R spatial shortcoming - inability to distinguish spatial and non-spatial objects. Prior to the creation of sp, spatial coordinates were treated as numbers. The sp package provided classes and methods for spatial data. Spatial objects could be represented as a one of four sp structures - points, lines, polygons and grids, all of which had two version - with and without attribute data. These objects were built using S4 classes, where all the information (such as bounding box, coordinate reference system, attribute table) were stored in specific slots. Attribute data in sp were represented as data.frame, which enabled users to do non-spatial processing, for example data subsetting or adding new columns. More importantly, this package also implemented a set of spatial methods. For example, it allowed for spatial summary and retrieval of spatial information, such as a number of dimensions, bounding box, spatial coordinates. The sp package together with rgdal made possible transform from one coordinate reference system to another. Finally, sp provided mapping capabilities using either the base plotting system or the lattice system. The organization of spatial data in the sp package rapidly become an R spatial standard. This resulted in a growing number of R packages built upon sp. About twenty packages depended sp by 2008, about one hundred by 2013 and more than 125 in 2017 (Bivand, Pebesma, and Gómez-Rubio 2013). On top of that, now about 220 packages imports some functions from the sp package. Some of the most prominent R packages using sp are: gstat - a set of functions for spatial and spatio-temporal geostatistics, geosphere used for spherical trigonometry, and adehabitat used for the analysis of habitat selection by animals. rgdal and sp overcome many spatial R shortcomings, however R still lacked a geometry calculation abilities. A robust geometry engine to R was added in the rgeos package as a part of Google Summer of Code 2010. It integrated spatial object from sp with the spatial functions and operators from the GEOS library. Although sp provided a possibility of reading and processing grid data, its non-vector capabilities were limited. A new raster package was created in 2010 to fill this gap. It established new spatial classes for raster objects and added functions for creating, reading and writing raster data. Moreover, it implemented raster algebra, general raster functions and gave tools for development of more specific raster functions. Very important feature of raster was its ability to work with raster dataset that are too large to be fitted in RAM. Simultaneously with the development of spatial classes and methods, R started to be used as an interface to several GIS software. The most popular early example was the GRASS package . Its first version was released in 2000 and it enabled a connection between R and GRASS GIS 5.0. In the latter years, a two new packages were published after the release of the new GRASS GIS versions: spgrass6 for GRASS GIS 6 and rgrass7 for GRASS GIS 7. Other examples of bridges between R and GIS include RSAGA (first release in 2008), ArcGIS (2008) and RQGIS (2016). More information about interfaces between R and GIS software could be find in ??. sp provided methods for plotting data using the two existing systems - base and lattice. However, a demand for convenient methods for spatial data visualizations rose with an increase in R spatial possibilities. In 2007, the third system, ggplot2, was published. It gave a possibility to convert spatial objects from sp into data.frames to plot them. ggplot2 spatial capabilities were improved in 2011 with the release of its accompanying package - ggmap, which provided several tools for spatial data visualization. Among others, it allowed to create plots with static maps from Google Maps or OpenStreetMap as the base layer and gave access to the several spatial APIs, for example the Google Geocoding. In the same year, the support of the lattice system was added to the raster objects with publishing of the rasterVis package. The wide range of visualization methods for numerical and categorical raster data, univariate and mutlivariate raster datasets and spatiotemporal rasters was provided in this package. Moreover, several packages were develop with a main goal of creation of complex, ready-to-use map with only a few lines of code. The tmap package was released in 2014 and enabled creation of thematic maps. They could be generated based on the spatial objects and its layout is optimized for maps with the use of legends, scale bars, grid lines, north arrows, etc. On the other hand, the leaflet package (released in 2015) offered creation and modification of interactive maps. It is a wrapper of the “Leaflet” JavaScript library, which output can be used on websites, R Markdown documents, and Shiny apps. Additionally, the mapview package was created on top of leaflet. It enabled quick creation of interactive visualization of spatial data containing variety of background maps, dynamic scale bar, feature attributes viewer and more. The most important recent evolution in R’s spatial ecosystem has without doubt been support for simple features thanks to the sf package (E. Pebesma 2017), described in Chapter 2. 1.4 Exercises Think about the terms ‘GIS’, ‘GDS’ and ‘Geocomputation’ described above. Which is your favourite and and why? Provide 3 reasons for using a scriptable language such R for geocomputation instead of established GIS programs such as QGIS. Name two advantages and two disadvantages of using the older sp package compared with the new sf package. References "],
["spatial-class.html", "2 Geographic data in R Prerequisites 2.1 Vector data 2.2 Raster data 2.3 Units", " 2 Geographic data in R Prerequisites This is the first practical chapter of book and therefore has software requirements. We assume you have a recent version of R installed on your computer and are comfortable using it at the command line, e.g. via an integrated development environment (IDE) such as RStudio (recommended). R/RStudio works on all major operating systems and can be installed and set-up in a few minutes on most modern computers, as described in section 2.3 and section 2.5 of Gillespie and Lovelace (2016) (other guides are available). If you are not a regular R user is worth taking time to ensure that you have an efficient R workflow because this will make the subsequent worked examples easier to run on your own computer, e.g. as part of an RStudio ‘project’ such as that provided in the root directory of the geocompr GitHub repository. We recommend getting up-to-speed with the language, with reference to resources such as Gillespie and Lovelace (2016), Grolemund and Wickham (2016), and online interactive guides such as that provided by DataCamp, before proceeding with the chapter. Once R is installed and set-up in a way that allows its use as part of an efficient workflow, we proceed to install and load the required packages sf (see the package’s README for install instructions) and spData (which requires devtools): install.packages(&quot;sf&quot;) install.packages(&quot;devtools&quot;) devtools::install_github(&quot;nowosad/spData&quot;) library(sf) library(spData) This chapter will provide brief explanations of both the fundamental geographic data types: vector and raster. A brief abstract description is provided of each before moving quickly to their implementation in R packages designed specifically for handling them. Both are vital to the sciences, although which will be of most use will largely depend on your discipline: Because human settlements and boundaries tend to be complex with precise borders defined by legal systems, vector data tends to dominate in the social sciences. In environmental sciences, by contrast, raster data tend to dominate due to its links to remote sensing. However, there is a substantial level of overlap: ecologists and demographers, for example, commonly use both vector and raster geographical data types. We therefore strongly recommend learning about each type of data before proceeding to understand how to manipulate them in subsequent chapters. 2.1 Vector data Vector data are based on points that are located on a cartesian (or geographic) coordinate system. Each point in vector data is typically described by two numbers representing distance from the \\(origin\\) along the \\(x\\) (horizontal) and \\(y\\) (vertical) axis in Euclidean space.3 In mathematical notation these points are typically represented as numbers separated by commas and enclosed by a pair of brackets: \\((1, 3)\\) for example, represents a point located one unit to the right and three units above the origin. There is clear link between these vector points and the vector class in R. The following line of code, for example, creates a 2 dimensional vector: p = vector(mode = &quot;numeric&quot;, length = 2) More commonly one would use the command c() (think of ‘c’ for ‘combine’) or seq() (short for ‘sequence’) to create vectors, as illustrated below in which the point illustrated in mathematical notation is created: p = c(1, 3) Now this can be plotted in cartesian space: plot(p[1], p[2], xlim = c(0, 5), ylim = c(0, 5)) Generally vector points have a high level of precision (but not necessarily accuracy) in geographic space as opposed to raster data which relies on cells that break the surface up into a discrete number of cells of the same size. This book uses simple features to work with vector data. 2.1.1 An introduction to Simple Features Simple features is an open standard data model developed and endorsed by the Open Geospatial Consortium (OGC) to represent a wide range of geographical information in a consistent data schema. Simple features is a hierarchical data model that simplifies geographic data by condensing a complex range of geographic forms into a single geometry class. Only 7 out of 68 possible types of simple feature are currently used in the vast majority of GIS operations (Figure 2.1). All of these are fully supported (with plotting methods etc) in the R package sf (E. Pebesma 2017).4 Figure 2.1: The subset of the Simple Features class hierarchy supported by sf. Figure based on the Open Geospatial Consortium document 06-103r4. sf can represent all common vector geometry types (raster data classes are not supported by sf): points, lines, polygons and their respective ‘multi’ versions (which group together features of the same type into a single feature). sf also supports geometry collections, which can contain multiple geometry types in a single feature. Given the breadth of geographic data forms, it may come as a surprise that a class system to support all of them is provided in a single package, which can be installed from CRAN:5 sf incorporates the functionality of the 3 main packages of the sp paradigm (sp (E. Pebesma and Bivand 2017) for the class system, rgdal (Bivand, Keitt, and Rowlingson 2017) for reading and writing data, rgeos (Bivand and Rundel 2017) for spatial operations undertaken by GEOS) in a single, cohesive whole. This is well-documented in sf’s vignettes: vignette(&quot;sf1&quot;) # for an introduction to the package vignette(&quot;sf2&quot;) # for reading, writing and converting Simple Features vignette(&quot;sf3&quot;) # for manipulating Simple Features As the first vignette explains, simple feature objects in R are stored in a data frame, with geographic data occupying special column, a ‘list-column’. This column is usually named ‘geom’ or ‘geometry’. A ‘real world’ example is loaded by the spData package, which loads the world object: library(spData) data(&quot;world&quot;) In the above code spData silently loaded the world dataset (and many other spatial datasets - see nowosad/spData for a full list). The dataset contains spatial and non-spatial information, as shown by the function names(), which reports the column headings in data frames. This can be seen as the final column name of world: names(world) #&gt; [1] &quot;iso_a2&quot; &quot;name_long&quot; &quot;continent&quot; &quot;region_un&quot; &quot;subregion&quot; #&gt; [6] &quot;type&quot; &quot;area_km2&quot; &quot;pop&quot; &quot;lifeExp&quot; &quot;gdpPercap&quot; #&gt; [11] &quot;geom&quot; It is the contents of this modest-looking geom column that gives sf objects their spatial powers. It’s actually a list-column, containing all the coordinates needed to plot the result as a map using the plot() method, the results of which are presented in Figure 2.2. library(sf) # must be loaded to plot sf objects #&gt; Linking to GEOS 3.5.0, GDAL 2.1.0, proj.4 4.8.0 plot(world) #&gt; Warning: plotting the first 9 out of 10 attributes; use max.plot = 10 to #&gt; plot all Figure 2.2: A spatial plot of the world using the sf package, with a facet for each attribute. Note that instead of creating a single map, as most GIS programs would, the plot() command has created multiple maps, one for each variable in the world datasets. This behavior can be useful for exploring the spatial distribution of different variables and is discussed further in 2.1.3 below. Being able to treat spatial objects as regular data frames with spatial powers has many advantages, especially if you are already used to working with data frames. The commonly used summary() function, for example, provides a useful overview of the variables within the world object, but prefixed with some information about the object’s spatial component: summary(world[&quot;lifeExp&quot;]) #&gt; lifeExp geom #&gt; Min. :48.9 MULTIPOLYGON :177 #&gt; 1st Qu.:64.3 epsg:4326 : 0 #&gt; Median :72.8 +proj=long...: 0 #&gt; Mean :70.6 #&gt; 3rd Qu.:77.1 #&gt; Max. :83.6 #&gt; NA&#39;s :9 The result provides a quick summary of both the non-spatial and spatial data contained in world. The former tells us that average life expectancy for humans on planet Earth is around around 70 years (ranging from less than 50 to more than 80 years). The latter tells us that the spatial component of world comprises a MULTIPOLYGON with 177 features and a geographical (lat/lon) coordinate reference system (CRS) with an EPSG code of 4326. Note that by appending [&quot;lifeExp&quot;] onto the object name in the previous code chunk, only the relevant column was summarised. We explore such ‘attribute operations’ in Chapter 3. First, it’s worth taking a look at the basic behavior and contents of this simple feature object, which can usefully be thought of as a ’Spatial dataFrame). sf objects are easy to subset. The code below shows its first 2 rows and 3 columns. The output shows 2 major differences compared with a regular data.frame: the inclusion of additional geographic data (geometry type, dimension, bbox and CRS information - epsg (SRID), proj4string), and the presence of final geometry column: world[1:2, 1:3] #&gt; Simple feature collection with 2 features and 3 fields #&gt; geometry type: MULTIPOLYGON #&gt; dimension: XY #&gt; bbox: xmin: 11.6401 ymin: -17.93064 xmax: 75.15803 ymax: 38.48628 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs #&gt; iso_a2 name_long continent geom #&gt; 1 AF Afghanistan Asia MULTIPOLYGON(((61.210817091... #&gt; 2 AO Angola Africa MULTIPOLYGON(((16.326528354... All this may seem rather complex, especially for a class system that is supposed to be simple. However, there are good reasons for organizing things this way and using sf. 2.1.1.1 Exercises What does the summary of the geometry column tell us about the world dataset, in terms of: The geometry type? How many countries there are? The coordinate reference system (CRS)? 2.1.2 Why Simple Features? There are many advantages of sf over sp, including: Faster reading and writing of data (more than 10 times faster in some cases) Better plotting performance sf objects can be treated as dataframes in most operations sf functions can be combined using %&gt;% operator and works well with the tidyverse collection of R packages sf function names are relatively consistent and intuitive (all begin with st_) compared with the function names and syntax of the sp, rgdal and rgeos packages that it supersedes. A broader advantage is that simple features are so well supported by other software products, not least PostGIS, which has heavily influenced the design of sf. A disadvantage you should be aware of, however, is that sf is not feature complete and that it continues to evolve. The transition from sp to sf will likely take many years, and many spatial packages may never switch. Even if you discover spatial data with R through the sf package, it is still worth at least being aware of sp classes, even if you rarely use them for everyday geospatial tasks. Fortunately it is easy to translate between sp and sf using the as() function: library(sp) world_sp = as(object = world, Class = &quot;Spatial&quot;) 2.1.3 Basic map making Basic maps in sf can be created quickly with the base plot() function. Unlike sp, however, sf by default creates a faceted plot, one sub-plot for each variable, as illustrated in the left-hand image in Figure 2.3. plot(world[3:4]) plot(world[&quot;pop&quot;]) Figure 2.3: Plotting with sf, with multiple variables (left) and a single variable (right). As with sp, you can add layers to your maps created with plot(), with the argument add = TRUE.6 To illustrate this, and prepare for content covered in chapters 3 and 4 on attribute and spatial data operations, we will subset and combine countries in the world object, to create a single object that represents Asia: asia = world[world$continent == &quot;Asia&quot;,] asia = st_union(asia) We can now plot the Asian continent over a map of the world. Note, however, that this only works if the initial plot has only 1 layer: plot(world[&quot;pop&quot;]) plot(asia, add = TRUE, col = &quot;red&quot;) This can be very useful for quickly checking the geographic correspondence between two or more layers: the plot() function is fast to execute and requires few lines of code, but does not create interactive maps with a wide range of options. For more advanced map making we recommend using a dedicated visualisation package such as tmap, ggplot2, mapview, or leaflet. 2.1.3.1 Challenge Using sf’s plot() command, create a map of Nigeria in context, building on the code that creates and plots Asia above (see Figure 2.4 for an example of what this could look like). Hint: this used the lwd, main and col arguments of plot(). Bonus: make the country boundaries a dotted grey line. Hint: border is an additional argument of plot() for sf objects. Figure 2.4: Map of Nigeria in context illustrating sf’s plotting capabilities 2.1.3.2 Further work sf makes R data objects more closely aligned to the data model used in GDAL and GEOS, in theory making spatial data operations faster. The work here provides a taste of the way sf operates but there is much more to learn (see Chapter 4). And there is also a wealth of information in the highly recommended vignettes of the package. As a final exercise, we’ll see one way of how to do a spatial overlay in sf. First, we convert the countries of the world into centroids, and then subset those in Asia. Finally, the summary-command tells us how many centroids (countries) are part of Asia (43) and how many are not (134). world_centroids = st_centroid(world) #&gt; Warning in st_centroid.sfc(st_geometry(x)): st_centroid does not give #&gt; correct centroids for longitude/latitude data sel_asia = st_intersects(world_centroids, asia, sparse = FALSE) #&gt; although coordinates are longitude/latitude, it is assumed that they are planar summary(sel_asia) #&gt; V1 #&gt; Mode :logical #&gt; FALSE:134 #&gt; TRUE :43 Note: another way of achieving the same result is with a GEOS function for identifying spatial overlay, which we’ll cover in more datail in Chapter 4. Because sf’s plot() builds on the base plot() function, you have access to all the base plotting options developed for base plotting. If you are accustomed to base plotting, this will be useful, as illustrated by the variable circle sizes generated by the cex argument in Figure 2.5, which was generated using the code below. plot(world[&quot;continent&quot;]) plot(world_centroids, add = TRUE, cex = world$pop / 1e8, lwd = 3) Figure 2.5: Centroids representing country population, diameter being proportional to population. 2.1.3.3 Exercises What does the lwd argument do in the plot() code that generates Figure 2.5. Perform the same operations and map making for another continent of your choice. Bonus: Download some global geographic data and add attribute variables assigning them to the continents of the world. 2.1.4 Simple feature classes To understand new data formats in depth, it often helps to generate them for first principles. This section walks through vector spatial classes step-by-step, from the elementary simple feature geometry to simple feature objects, with class sf, representing complex spatial data. Before describing each geometry type that the sf package supports it is worth taking a step back to understand the building blocks of sf objects. As stated in section 2.1.1, simple features are simply dataframes with at least one special column that makes it spatial. These spatial columns are often called geom or geometry and can be like non-spatial columns: world$geom refers to the spatial element of the world object described above. These geometry columns are ‘list columns’ of class sfc: they are simple feature collections. In turn, sfc objects are composed of one or more objects of class sfg: simple feature geometries. To understand how the spatial components of simple features work, it is vital to understand simple feature geometries. For this reason we cover each type currently supported sfg in the next sections before moving to describe how they can be combined to form sfc and eventually full sf objects. 2.1.4.1 Simple feature geometry types Geometries are the basic building blocks of simple features. Simple features could be represented as one of the 17 geometry types using the sf package. In this chapter we will focus on seven, the most commonly used, simple features types: POINT, LINESTRING, POLYGON, MULTIPOINT, MULTILINESTRING, MULTIPOLYGON and GEOMETRYCOLLECTION. The whole list of possible feature types could be found in the PostGIS manual. Simple features, outside of an R environment, could be represented in one of two ways, ether as a well-known binary (WKB) or well-known text (WKT). Well-known binary (WKB) representations are usually hexadecimal strings, which are used to transfer and store geometry objects in databases. Well-known text (WKT), on the other hand, is a text markup description of simple features. Both formats are exchangeable, therefore we would focus only on the well-known text (WKT) representation. All of the geometry types are built of points. Each point could be described as coordinates in a 2D, 3D or 4D space: X and Y coordinates represent location of points. It could be either easting and northing or longitude and latitude. A Z coordinate denotes altitude. An M coordinate (“measure”) allows to represent some measure associated to the point, but not the whole feature. This coordinate could be a time of measurement, information who measured this point or what’s the error of measurement. As a result, four possible types of points exist - XY (two-dimensional), XYZ (three-dimensional containing altitude), XYM (three-dimensional containing measure) and XYZM (four-dimensional). They could be easily describes as a well-known text: XY - POINT (5 2) XYZ - POINT (5 2 3) XYM - POINTM (5 2 1) XYZM - POINT (5 2 3 1) A linestring is represented by a sequence of points with linear interpolation between points, for example: LINESTRING (1 5, 4 4, 4 1, 2 2, 3 2) Linestring cannot have self intersecting line part. In other words, lines shouldn’t pass through the same point twice (except for the endpoint). A polygon is a sequence of points, where the first and last point have the same coordinates. Similarly to linestring, polygon needs to create a non-self intersecting ring. By the definition, polygon has one exterior boundary (outer ring) and zero or more interior boundaries (inner ring). These interior boundaries are often known as holes. Zero interior boundaries (holes) - POLYGON ((1 5, 2 2, 4 1, 4 4, 1 5)) One hole - POLYGON ((1 5, 4 4, 4 1, 2 2, 1 5), (2 4, 3 4, 3 3, 2 3, 2 4)) The next three geometry types are the sets of previous ones: a multipoint is a set of points, multilinestring is a set strings and multipolygon is a set of polygons: Multipoint - MULTIPOINT (5 2, 1 3, 3 4, 3 2) Multistring - MULTILINESTRING ((1 5, 4 4, 4 1, 2 2, 3 2), (1 2, 2 4)) Multipolygon - MULTIPOLYGON ((1 5, 4 4, 4 1, 2 2, 1 5), (0 2, 1 2, 1 3, 0 3, 0 2)) A geometry collection is the most heterogeneous type. It could consists of a set of any geometry types previously mentioned, for example: Geometry collection - GEOMETRYCOLLECTION (MULTIPOINT (5 2, 1 3, 3 4, 3 2), LINESTRING (1 5, 4 4, 4 1, 2 2, 3 2))) 2.1.4.2 Simple feature geometry (sfg) objects Simple feature geometry types are represented in R by objects of a sfg class. A sfg object is a geometry of a single feature - a point, linestring, polygon, multipoint, multilinestring, multipolygon or geometry collection. Usually you don’t need to create geometries on your own. In most cases, geometries are read from spatial files. However, a set of function to create simple feature geometry objects (sfg) exists in R and could be used in special cases. The names of these functions are simple and consistent, as they start with a st_ prefix and end with name of geometry types in lowercase letters: A point - st_point() A linestring - st_linestring() A polygon - st_polygon() A multipoint - st_multipoint() A multilinestring - st_multilinestring() A multipolygon - st_multipolygon() A geometry collection - st_geometrycollection() In R, sfg objects are represented by three native data types: A numeric vector - a single point A matrix - a set of points, where each row contains a point - a multipoint or linestring A list - any other set, e.g. a multilinestring or geometry collection To create point objects, we could use the st_point() function: # note that we use a numeric vector for points st_point(c(5, 2)) # XY point #&gt; POINT(5 2) st_point(c(5, 2, 3)) # XYZ point #&gt; POINTZ(5 2 3) st_point(c(5, 2, 1), dim = &quot;XYM&quot;) # XYM point #&gt; POINTM(5 2 1) st_point(c(5, 2, 3, 1)) # XYZM point #&gt; POINTZM(5 2 3 1) XY, XYZ and XYZM types of points are automatically created based on the length of a numeric vector. Only the XYM type needs to be specified using a dim argument. Multipoint and linestring objects are created based on a matrix using st_multipoint() and st_linestring() functions: # the rbind function simplify creation of matrices ## MULTIPOINT multipoint_matrix = rbind(c(5, 2), c(1, 3), c(3, 4), c(3, 2)) st_multipoint(multipoint_matrix) #&gt; MULTIPOINT(5 2, 1 3, 3 4, 3 2) ## LINESTRING linestring_matrix = rbind(c(1, 5), c(4, 4), c(4, 1), c(2, 2), c(3, 2)) st_linestring(linestring_matrix) #&gt; LINESTRING(1 5, 4 4, 4 1, 2 2, 3 2) The rest of objects are represented by lists: ## POLYGON polygon_list = list(rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5))) st_polygon(polygon_list) #&gt; POLYGON((1 5, 2 2, 4 1, 4 4, 1 5)) ## POLYGON with a hole polygon_border = rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5)) polygon_hole = rbind(c(2, 4), c(3, 4), c(3, 3), c(2, 3), c(2, 4)) polygon_with_hole_list = list(polygon_border, polygon_hole) st_polygon(polygon_with_hole_list) #&gt; POLYGON((1 5, 2 2, 4 1, 4 4, 1 5), (2 4, 3 4, 3 3, 2 3, 2 4)) ## MULTILINESTRING multilinestring_list = list(rbind(c(1, 5), c(4, 4), c(4, 1), c(2, 2), c(3, 2)), rbind(c(1, 2), c(2, 4))) st_multilinestring((multilinestring_list)) #&gt; MULTILINESTRING((1 5, 4 4, 4 1, 2 2, 3 2), (1 2, 2 4)) ## MULTIPOLYGON multipolygon_list = list(list(rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5))), list(rbind(c(0, 2), c(1, 2), c(1, 3), c(0, 3), c(0, 2)))) st_multipolygon(multipolygon_list) #&gt; MULTIPOLYGON(((1 5, 2 2, 4 1, 4 4, 1 5)), ((0 2, 1 2, 1 3, 0 3, 0 2))) ## GEMETRYCOLLECTION gemetrycollection_list = list(st_multipoint(multipoint_matrix), st_linestring(linestring_matrix)) st_geometrycollection(gemetrycollection_list) #&gt; GEOMETRYCOLLECTION(MULTIPOINT(5 2, 1 3, 3 4, 3 2), LINESTRING(1 5, 4 4, 4 1, 2 2, 3 2)) 2.1.4.3 Simple feature collections One sfg object contains only a single simple feature geometry. A simple feature collection (sfc) is a list of sfg objects with information about a coordinate reference system. The st_sfc() function can be used to create sfc objects. For example, we want to collect two simple features of a point type: # sfc POINT point1 = st_point(c(5, 2)) point2 = st_point(c(1, 3)) st_sfc(point1, point2) #&gt; Geometry set for 2 features #&gt; geometry type: POINT #&gt; dimension: XY #&gt; bbox: xmin: 1 ymin: 2 xmax: 5 ymax: 3 #&gt; epsg (SRID): NA #&gt; proj4string: NA #&gt; POINT(5 2) #&gt; POINT(1 3) In most cases, an sfc object contains objects of identical geometry type. Therefore, when we combine sfg objects of a polygon type we would get sfc of a polygon type, and a collection of multilinestring would result into sfc of a multilinestring type: # sfc POLYGON polygon_list1 = list(rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5))) polygon1 = st_polygon(polygon_list) polygon_list2 = list(rbind(c(0, 2), c(1, 2), c(1, 3), c(0, 3), c(0, 2))) polygon2 = st_polygon(polygon_list2) st_sfc(polygon1, polygon2) #&gt; Geometry set for 2 features #&gt; geometry type: POLYGON #&gt; dimension: XY #&gt; bbox: xmin: 0 ymin: 1 xmax: 4 ymax: 5 #&gt; epsg (SRID): NA #&gt; proj4string: NA #&gt; POLYGON((1 5, 2 2, 4 1, 4 4, 1 5)) #&gt; POLYGON((0 2, 1 2, 1 3, 0 3, 0 2)) # sfc MULTILINESTRING multilinestring_list1 = list(rbind(c(1, 5), c(4, 4), c(4, 1), c(2, 2), c(3, 2)), rbind(c(1, 2), c(2, 4))) multilinestring1 = st_multilinestring((multilinestring_list1)) multilinestring_list2 = list(rbind(c(2, 9), c(7, 9), c(5, 6), c(4, 7), c(2, 7)), rbind(c(1, 7), c(3, 8))) multilinestring2 = st_multilinestring((multilinestring_list2)) st_sfc(multilinestring1, multilinestring2) #&gt; Geometry set for 2 features #&gt; geometry type: MULTILINESTRING #&gt; dimension: XY #&gt; bbox: xmin: 1 ymin: 1 xmax: 7 ymax: 9 #&gt; epsg (SRID): NA #&gt; proj4string: NA #&gt; MULTILINESTRING((1 5, 4 4, 4 1, 2 2, 3 2), (1 2... #&gt; MULTILINESTRING((2 9, 7 9, 5 6, 4 7, 2 7), (1 7... It is possible to create a sfc object from sfg objects with different geometry types. This new object would have a “geometry” geometry type: # sfc GEOMETRY st_sfc(point1, multilinestring1) #&gt; Geometry set for 2 features #&gt; geometry type: GEOMETRY #&gt; dimension: XY #&gt; bbox: xmin: 1 ymin: 1 xmax: 5 ymax: 5 #&gt; epsg (SRID): NA #&gt; proj4string: NA #&gt; POINT(5 2) #&gt; MULTILINESTRING((1 5, 4 4, 4 1, 2 2, 3 2), (1 2... The simple feature collection objects could have more information about spatial data than just geometries. It is possible to store coordinate reference systems (CRS) in them. CRS can be represented by epsg (SRID) and proj4string attributes. The default value of epsg (SRID) and proj4string is NA (Not Available), which is used when the CRS is unknown: st_sfc(point1, point2) #&gt; Geometry set for 2 features #&gt; geometry type: POINT #&gt; dimension: XY #&gt; bbox: xmin: 1 ymin: 2 xmax: 5 ymax: 3 #&gt; epsg (SRID): NA #&gt; proj4string: NA #&gt; POINT(5 2) #&gt; POINT(1 3) The sfc object could have NA values in both attributes or have an actual value for one or two CRS attributes. Importantly, all geometries in the sfc objects must have the same CRS. We can add coordinate reference system as a crs argument of st_sfc(). This argument could accept either an integer with the epsg code or character with proj4string. For example, we can set the WGS 84 using either its epsg code (4326) or its proj4string definition (&quot;+proj=longlat +datum=WGS84 +no_defs&quot;): # EPSG definition st_sfc(point1, point2, crs = 4326) #&gt; Geometry set for 2 features #&gt; geometry type: POINT #&gt; dimension: XY #&gt; bbox: xmin: 1 ymin: 2 xmax: 5 ymax: 3 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs #&gt; POINT(5 2) #&gt; POINT(1 3) # PROJ4STRING definition st_sfc(point1, point2, crs = &quot;+proj=longlat +datum=WGS84 +no_defs&quot;) #&gt; Geometry set for 2 features #&gt; geometry type: POINT #&gt; dimension: XY #&gt; bbox: xmin: 1 ymin: 2 xmax: 5 ymax: 3 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs #&gt; POINT(5 2) #&gt; POINT(1 3) Both of these approaches have advantages and disadvantages. An epsg code is usually shorter and therefore easier to remember. The code also refers to only one, well-defined coordinate reference system. It could be, however, considered a limitation of epsg, as it is not flexible. On the hand, a proj4string definition is longer - it could specify many different parameters, such as projection type, datum and ellipsoid. This makes proj4string more complicated, but also allows to create many different projections and modify existing ones. proj4string is also supported by the PROJ.4 software (and therefore by the sf package), which enables transformations between different projections. epsg always points to a particular CRS. This property makes possible for PROJ.4 to convert epsg into corresponding proj4string. For example, we can set the UTM Zone 11N projection with epsg code 2955: st_sfc(point1, point2, crs = 2955) #&gt; Geometry set for 2 features #&gt; geometry type: POINT #&gt; dimension: XY #&gt; bbox: xmin: 1 ymin: 2 xmax: 5 ymax: 3 #&gt; epsg (SRID): 2955 #&gt; proj4string: +proj=utm +zone=11 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs #&gt; POINT(5 2) #&gt; POINT(1 3) As you can see above, the proj4string definition was automatically added. Now we can try to set the CRS using proj4string: st_sfc(point1, point2, crs = &quot;+proj=utm +zone=11 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs&quot;) #&gt; Geometry set for 2 features #&gt; geometry type: POINT #&gt; dimension: XY #&gt; bbox: xmin: 1 ymin: 2 xmax: 5 ymax: 3 #&gt; epsg (SRID): NA #&gt; proj4string: +proj=utm +zone=11 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs #&gt; POINT(5 2) #&gt; POINT(1 3) The above result doesn’t contain epsg. This is due the fact that no general method for conversion from proj4string to epsg exists. 2.1.4.4 Simple feature objects Most of the time, geometries are related to a set of attributes. These attributes could represent the name of the geometry, measured value, group to which the geometry belongs, and many more. For example, we measured a temperature of 25°C on the Trafalgar Square in London on June 21th 2017. This can be described not only by its coordinates and temperature value, but also by the name of the point, the date of the measurement, it’s category (city or village), or if the measurement was made using an automatic station. The simple feature class, sf, is a combination of an attribute table (data.frame) and simple feature geometry collection (sfc). Simple features are created using the st_sf() function: # sfg objects london_point = st_point(c(0.1, 51.5)) craggy_island_point = st_point(c(-9.6, 53.0)) # sfc object our_geometry = st_sfc(london_point, craggy_island_point, crs = 4326) # data.frame object our_attributes = data.frame(name = c(&quot;London&quot;, &quot;Craggy Island&quot;), temperature = c(25, 13), date = c(as.Date(&quot;2017-06-21&quot;), as.Date(&quot;2017-06-22&quot;)), category = c(&quot;city&quot;, &quot;village&quot;), automatic = c(FALSE, TRUE)) # sf object sf_points = st_sf(our_attributes, geometry = our_geometry) The above example illustrates the components of sf objects. Firstly, simple feature geometry (sfg) objects are defined using coordinates. These objects are combined into a simple feature collection (sfc). The sfc also stores the information about coordinate reference system. data.frame is created, where each row corresponds to one geometry feature. Finally, the attribute table and sfc object are tied together using the st_sf() function. sf_points #&gt; Simple feature collection with 2 features and 5 fields #&gt; geometry type: POINT #&gt; dimension: XY #&gt; bbox: xmin: -9.6 ymin: 51.5 xmax: 0.1 ymax: 53 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs #&gt; name temperature date category automatic geometry #&gt; 1 London 25 2017-06-21 city FALSE POINT(0.1 51.5) #&gt; 2 Craggy Island 13 2017-06-22 village TRUE POINT(-9.6 53) The resulting object has two classes - sf and data.frame: class(sf_points) #&gt; [1] &quot;sf&quot; &quot;data.frame&quot; 2.2 Raster data This section is work in progress. 2.3 Units The final thing to say about sf objects in this chapter is that they have units. This is illustrated by calculating the area of Nigeria: st_area(nigeria) #&gt; 9.05e+11 m^2 To translate this figure into a more digestible size, it is tempting to divide the results by a million (the number of square meters in a square kilometer): st_area(nigeria) / 1e6 #&gt; 905072 m^2 However, the result is incorrectly given in the same units. The solution is to set the units with the units package: units::set_units(st_area(nigeria), km^2) #&gt; 905072 km^2 References "],
["attr.html", "3 Attribute data operations Prerequisites 3.1 Introduction 3.2 Attribute subsetting 3.3 Attribute data aggregation 3.4 Attribute data joining 3.5 Attribute data creation 3.6 Removing spatial information", " 3 Attribute data operations Prerequisites This chapter requires tidyverse and sf: library(sf) library(tidyverse) You must have loaded the world and worldbank_df data from the spData package: library(spData) data(&quot;world&quot;) data(&quot;worldbank_df&quot;) 3.1 Introduction Attribute data is non-spatial information associated with geographic data. In the context of simple features, introduced in the previous chapter, this means a data frame with a column for each variable and one row per geographic feature stored in the geom list-column of sf objects. This structure enables multiple columns to represent a range of attributes for thousands of features (one row per feature). There is a strong overlap between geographical and non-geographical operations: non-spatial subset, aggregate and join each have their geographical equivalents. This chapter therefore provides the foundation for next (chapter 4) in terms of structure and input data. The non-spatial versions of these methods are widely used and, using functions such as [ from base R and filter() from the tidyverse, cross-transferable to the tasks of spatial data operations. As outlined in Chapter 2, support for simple features in R is provided by the sf package. sf ensures simple feature objects work well with generic R functions such as plot() and summary(). The reason for this is that simple features have their own class system: class(world) #&gt; [1] &quot;sf&quot; &quot;data.frame&quot; The result shows that sf objects actually have two classes, sf and data.frame. Simple features are simply data frames (square tables), but with spatial attributes (usually stored in a special geom list-column in the data frame). This duality is central to the concept of simple features: most of the time a sf can be treated as and behaves like a data.frame. Simple features are, in essence, data frames with a spatial extension. The trusty data.frame (and extensions to it such as the tibble class used in the tidyverse) is a workhorse for data analysis in R. Extending this system to work with spatial data has many advantages, meaning that all the accumulated know-how in the R community for handling data frames to be applied to geographic data which contain attributes. Before proceeding to perform various attribute operations of a dataset, it is worth taking time to think about its basic parameters. In this case, the world object contains 10 non-geographical columns (and one geometry list-column) with data for almost 200 countries. This can be be checked using base R functions for working with tabular data such as nrow() and ncol(): dim(world) # it is a 2 dimensional object, with rows and columns #&gt; [1] 177 11 nrow(world) # how many rows? #&gt; [1] 177 ncol(world) # how many columns? #&gt; [1] 11 Extracting the attribute data of an sf object is the same as removing its geometry: world_df = st_set_geometry(world, NULL) class(world_df) #&gt; [1] &quot;data.frame&quot; This can be useful if the geometry column causes problems, e.g. by occupying large amounts of RAM, or to focus attention on the non-spatial data. For most cases, however, there is no harm in keeping the geometry column because non-spatial data operations on sf objects act only on the attribute data. For this reason, being good at working with attribute data in geographic data is the same being proficient at handling data frames in R. For many applications, the most effective and intuitive way of working with data frames is with the dplyr package, as we will see in the next section.7 3.2 Attribute subsetting Because simple feature objects are also data frames, you can use a wide range of functions (from base R and packages) for subsetting them, based on attribute data. Base R subsetting functions include [, subset() and $. dplyr subsetting functions include select(), filter(), and pull(). Both sets of functions preserve the spatial components of the data. The [ operator subsets rows and columns. It requires two arguments, one for rows (observations) and one for columns (variables), and is appended to the object name, e.g. object[rows, columns], which can be either numeric, indicating position, or character, indicating row or column names. Leaving an argument empty returns all, meaning object[rows,] returns just the rows of interest for all columns. This functionality is demonstrated below (results not shown - try running this on your own computer to check the output is as expected): world[1:6,] # subset rows by position world[, 1:3] # subset columns by position world[, c(&quot;name_long&quot;, &quot;lifeExp&quot;)] # subset columns by name The [ subsetting operator also accepts logical vectors corresponding to some criteria which returns TRUE or FALSE. The following code chunk, for example, creates a new object, small_countries, which only contains nations whose surface area is below 100,000 km2: sel_area = world$area_km2 &lt; 10000 summary(sel_area) #&gt; Mode FALSE TRUE #&gt; logical 170 7 small_countries = world[sel_area,] Note that we created the intermediary sel_object to illustrate the process and demonstrate that only 7 countries are ‘small’ by this definition. A more concise command, that omits the intermediary object, generates the same result: small_countries = world[world$area_km2 &lt; 10000,] Another way to generate the same result is with the base R function subset(): small_countries = subset(world, area_km2 &lt; 10000) The $ operator retrieves a variable by its name and returns a vector: world$name_long dplyr makes working with data frames easier and is compatible with sf objects. The main dplyr functions that help with attribute subsetting are select(), slice(), filter() and pull(). The select() function picks columns by name or position. For example, you could select only two columns, name_long and pop, with the following command: world1 = select(world, name_long, pop) head(world1, n = 2) #&gt; Simple feature collection with 2 features and 2 fields #&gt; geometry type: MULTIPOLYGON #&gt; dimension: XY #&gt; bbox: xmin: 11.6401 ymin: -17.93064 xmax: 75.15803 ymax: 38.48628 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs #&gt; name_long pop geom #&gt; 1 Afghanistan 31627506 MULTIPOLYGON(((61.210817091... #&gt; 2 Angola 24227524 MULTIPOLYGON(((16.326528354... This function allows a range of columns to be selected using the : operator: # all columns between name_long and pop (inclusive) world2 = select(world, name_long:pop) head(world2, n = 2) Specific columns can be omitted using the - operator: # all columns except subregion and area_km2 (inclusive) world3 = select(world, -subregion, -area_km2) head(world3, n = 2) select() can be also used to both subset and rename columns in a single line, for example: world4 = select(world, name_long, population = pop) head(world4, n = 2) #&gt; Simple feature collection with 2 features and 2 fields #&gt; geometry type: MULTIPOLYGON #&gt; dimension: XY #&gt; bbox: xmin: 11.6401 ymin: -17.93064 xmax: 75.15803 ymax: 38.48628 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs #&gt; name_long population geom #&gt; 1 Afghanistan 31627506 MULTIPOLYGON(((61.210817091... #&gt; 2 Angola 24227524 MULTIPOLYGON(((16.326528354... This is more concise than the base R equivalent (which saves the result as an object called world5 to avoid overriding the world dataset created previously): world5 = world[c(&quot;name_long&quot;, &quot;pop&quot;)] # subset columns by name names(world5)[3] = &quot;population&quot; # rename column manually The select() function works with a number of special functions that help with more complicated selection, such as contains(), starts_with(), num_range(). More details could be find on the function help page - ?select. slice() is the equivalent of select() but work for rows. The following code chunk, for example, selects the 3rd to 5th rows: slice(world, 3:5) filter() is dplyr’s equivalent of base R’s subset() function. It keeps only rows matching given criteria, e.g. only countries with a very high average life expectancy: # only countries with a life expectation larger than 82 years world6 = filter(world, lifeExp &gt; 82) The standard set of comparison operators can be used in the filter() function: Symbol Name == Equal to != Not equal to &gt; Greater than &gt;= Greater than or equal &lt; Less than &lt;= Less than or equal &amp; And | Or ! Not , >=, The pipe operator (%&gt;%), which passes the output of one function into the first argument of the next function, is commonly used in dplyr data analysis workflows. This works because the fundamental dplyr functions (or ‘verbs’, like select()) all take a data frame object in and spit a data frame object out. Combining many functions together with pipes is called chaining or piping. The advantage over base R for complex data processing operations is that this approach prevents nested functions and is easy to read because there is a clear order and modularity to the work (a piped command can be commented out, for example). The example below shows yet another way of creating the renamed world dataset, using the pipe operator: world7 = world %&gt;% select(name_long, continent) Note that this can also be written without the pipe operator because, in the above code, the world object is simply ‘piped’ into the first argument of select(). The equivalent dplyr code without the pipe operator is: world8 = select(world, name_long, continent) pull() retrieves a single variable by name or position and returns a vector: world %&gt;% pull(name_long) The pipe operator can be used for many data processing tasks with attribute data. # 1,000,000,000 could be expressed as 1e9 in the scientific notation world %&gt;% filter(pop &gt; 1e9) #&gt; Simple feature collection with 2 features and 10 fields #&gt; geometry type: MULTIPOLYGON #&gt; dimension: XY #&gt; bbox: xmin: 68.17665 ymin: 7.965535 xmax: 135.0263 ymax: 53.4588 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs #&gt; iso_a2 name_long continent region_un subregion type #&gt; 1 CN China Asia Asia Eastern Asia Country #&gt; 2 IN India Asia Asia Southern Asia Sovereign country #&gt; area_km2 pop lifeExp gdpPercap geom #&gt; 1 9409832 1.36e+09 75.8 12759 MULTIPOLYGON(((110.33918786... #&gt; 2 3142892 1.30e+09 68.0 5392 MULTIPOLYGON(((77.837450799... This is equivalent to the following base R code (not run to preserve the NAs):8 # subsetting simple feature rows by values world$pop[is.na(world$pop)] = 0 # set NAs to 0 world_few_rows = world[world$pop &gt; 1e9,] The %&gt;% operator works the best for combining many operations. For example, we want to (1) rename the name_long column into a name column, (2) picks only name, subregion and gdpPercap and (3) subset countries from “Eastern Asia” with gross domestic product per capita larger than 30,000$: world %&gt;% select(name = name_long, subregion, gdpPercap) %&gt;% filter(subregion == &quot;Eastern Asia&quot;, gdpPercap &gt; 30000) #&gt; Simple feature collection with 2 features and 3 fields #&gt; geometry type: MULTIPOLYGON #&gt; dimension: XY #&gt; bbox: xmin: 126.1174 ymin: 31.02958 xmax: 145.5431 ymax: 45.55148 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs #&gt; name subregion gdpPercap geom #&gt; 1 Japan Eastern Asia 37365 MULTIPOLYGON(((134.63842817... #&gt; 2 Republic of Korea Eastern Asia 33640 MULTIPOLYGON(((128.34971642... 3.2.1 Exercises use contains() 3. Find all countries that: (few points) 4. Exercises about additional select and filter helper functions (one_of; between, is.na, near, etc.) --> 3.3 Attribute data aggregation As demonstrated in chapter 2.1.1, summary() provides summary statistics of sf objects (result not shown): # data summary summary(world) This function usefully provides a quick glimpse of data when using R interactively, but lacks flexibility and should not be used to create new objects. The dplyr equivalent is summarise(), which returns summary statistics based on functions and variables defined by the user. The following code chunk, for example, calculates the total population and number of countries in the world: # customized data summary world_summary = world %&gt;% summarise(pop = sum(pop, na.rm = TRUE), country_n = n()) world_summary #&gt; Simple feature collection with 1 feature and 2 fields #&gt; geometry type: MULTIPOLYGON #&gt; dimension: XY #&gt; bbox: xmin: -180 ymin: -90 xmax: 180 ymax: 83.64513 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs #&gt; pop country_n geom #&gt; 1 7.21e+09 177 MULTIPOLYGON(((-159.2081835... A wide range of summary statistics can thus be generated by the function. A list of useful summary statistics can be found in the help page associated with the function: see ?summarise for more information. summarise() becomes even more powerful when combined with group_by(), allowing per group summaries, analogous to the base R function aggregate(). The following code chunk calculates the total population and number of countries on per continent: # data summary by groups world_continents = world %&gt;% group_by(continent) %&gt;% summarise(pop = sum(pop, na.rm = TRUE), country_n = n()) world_continents #&gt; Simple feature collection with 8 features and 3 fields #&gt; geometry type: GEOMETRY #&gt; dimension: XY #&gt; bbox: xmin: -180 ymin: -90 xmax: 180 ymax: 83.64513 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs #&gt; # A tibble: 8 x 4 #&gt; continent pop country_n geom #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;simple_feature&gt; #&gt; 1 Africa 1.15e+09 51 &lt;MULTIPOLYGON...&gt; #&gt; 2 Antarctica 0.00e+00 1 &lt;MULTIPOLYGON...&gt; #&gt; 3 Asia 4.31e+09 47 &lt;MULTIPOLYGON...&gt; #&gt; 4 Europe 7.39e+08 39 &lt;MULTIPOLYGON...&gt; #&gt; # ... with 4 more rows % --> % --> 3.3.1 Exercises 3.4 Attribute data joining Combining data from different sources is one of the most common task in data preparation. It could be done using joins - methods created to work with a pair of tables. The dplyr package has a set of verbs to easily connect data.frames - left_join(), right_join(), inner_join(), full_join, semi_join() and anti_join(). They are thoroughly explained in the Relational data chapter in the book R for Data Science (Grolemund and Wickham 2016). Working with spatial data, however, usually involves a connection between spatial data (sf objects) and tables (data.frame objects). Fortunately, the sf package has all of the dplyr join functions adapted to work with sf objects. The only important difference between combining two data.frames and combining sf with data.frame is a geom column. Therefore, the result of data joins could be either an sf or data.frame object. The easiest way to understand the concept of joins is to use a smaller datasets. We will use an sf object north_america with country codes (iso_a2), names and geometries, as well as data.frame object wb_north_america containing information about urban population and unemployment for three countries. It is important to add that the first object has data about Canada, Greenland and United States and the second one has data about Canada, Mexico and United States: north_america = world %&gt;% filter(subregion == &quot;Northern America&quot;) %&gt;% select(iso_a2, name_long) north_america #&gt; Simple feature collection with 3 features and 2 fields #&gt; geometry type: MULTIPOLYGON #&gt; dimension: XY #&gt; bbox: xmin: -171.7911 ymin: 18.91619 xmax: -12.20855 ymax: 83.64513 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs #&gt; iso_a2 name_long geom #&gt; 1 CA Canada MULTIPOLYGON(((-63.6645 46.... #&gt; 2 GL Greenland MULTIPOLYGON(((-46.76379 82... #&gt; 3 US United States MULTIPOLYGON(((-155.54211 1... plot(north_america[0]) wb_north_america = worldbank_df %&gt;% filter(name %in% c(&quot;Canada&quot;, &quot;Mexico&quot;, &quot;United States&quot;)) %&gt;% select(name, iso_a2, urban_pop, unemploy = unemployment) wb_north_america #&gt; name iso_a2 urban_pop unemploy #&gt; 1 Canada CA 29022137 6.91 #&gt; 2 Mexico MX 99018446 5.25 #&gt; 3 United States US 259740511 6.17 In this book, we focus on spatial data. All of the following examples will have a sf object as the first argument and a data.frame object as the second argument. A new sf object will be a result of these joins. However, the reverse order is also possible and will result in a data.frame object. This is beyond the scope of this book, but we encourage you to try it. 3.4.1 Left joins Left join is the most often used type of joins. The left_join() returns all observations from the left object (north_america) and the matched observations from the right object (wb_north_america). In cases, like Greenland, when we don’t have a data in the right object, NA values will be introduced. To connect two object we need to specify a key. This is a variable (or variables) that uniquely identifies each observation (row). The argument by is used to state which variable is the key. In simple cases, a single, unique variable exist in both objects, for example iso_a2 column: left_join1 = north_america %&gt;% left_join(wb_north_america, by = &quot;iso_a2&quot;) left_join1 #&gt; Simple feature collection with 3 features and 5 fields #&gt; geometry type: MULTIPOLYGON #&gt; dimension: XY #&gt; bbox: xmin: -171.7911 ymin: 18.91619 xmax: -12.20855 ymax: 83.64513 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs #&gt; iso_a2 name_long name urban_pop unemploy #&gt; 1 CA Canada Canada 29022137 6.91 #&gt; 2 GL Greenland &lt;NA&gt; NA NA #&gt; 3 US United States United States 259740511 6.17 #&gt; geom #&gt; 1 MULTIPOLYGON(((-63.6645 46.... #&gt; 2 MULTIPOLYGON(((-46.76379 82... #&gt; 3 MULTIPOLYGON(((-155.54211 1... It is also possible to join objects by different variables. Both of the datasets have variables with names of countries, but they are named differently. The north_america has a name_long column and the wb_north_america has a name column. In these cases, we can use a named vector to specify the connection, e.g. c(&quot;name_long&quot; = &quot;name&quot;): left_join2 = north_america %&gt;% left_join(wb_north_america, by = c(&quot;name_long&quot; = &quot;name&quot;)) left_join2 #&gt; Simple feature collection with 3 features and 5 fields #&gt; geometry type: MULTIPOLYGON #&gt; dimension: XY #&gt; bbox: xmin: -171.7911 ymin: 18.91619 xmax: -12.20855 ymax: 83.64513 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs #&gt; iso_a2.x name_long iso_a2.y urban_pop unemploy #&gt; 1 CA Canada CA 29022137 6.91 #&gt; 2 GL Greenland &lt;NA&gt; NA NA #&gt; 3 US United States US 259740511 6.17 #&gt; geom #&gt; 1 MULTIPOLYGON(((-63.6645 46.... #&gt; 2 MULTIPOLYGON(((-46.76379 82... #&gt; 3 MULTIPOLYGON(((-155.54211 1... The new object left_join2, however is still not perfectly connected as it has two duplicated variables - iso_a2.x and iso_a2.y. To solve this problem we should specify all the keys: left_join3 = north_america %&gt;% left_join(wb_north_america, by = c(&quot;iso_a2&quot;, &quot;name_long&quot; = &quot;name&quot;)) left_join3 #&gt; Simple feature collection with 3 features and 4 fields #&gt; geometry type: MULTIPOLYGON #&gt; dimension: XY #&gt; bbox: xmin: -171.7911 ymin: 18.91619 xmax: -12.20855 ymax: 83.64513 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs #&gt; iso_a2 name_long urban_pop unemploy geom #&gt; 1 CA Canada 29022137 6.91 MULTIPOLYGON(((-63.6645 46.... #&gt; 2 GL Greenland NA NA MULTIPOLYGON(((-46.76379 82... #&gt; 3 US United States 259740511 6.17 MULTIPOLYGON(((-155.54211 1... % --> 3.4.2 Right joins right_join() keeps all observations from the second object (wb_north_america in this case) but preserves the sf class from the left object (north_america). right_join1 = north_america %&gt;% right_join(wb_north_america, by = c(&quot;iso_a2&quot;, &quot;name_long&quot; = &quot;name&quot;)) right_join1 #&gt; Simple feature collection with 3 features and 4 fields (with 1 geometry empty) #&gt; geometry type: MULTIPOLYGON #&gt; dimension: XY #&gt; bbox: xmin: -171.7911 ymin: 18.91619 xmax: -52.6481 ymax: 83.23324 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs #&gt; iso_a2 name_long urban_pop unemploy geom #&gt; 1 CA Canada 29022137 6.91 MULTIPOLYGON(((-63.6645 46.... #&gt; 2 MX Mexico 99018446 5.25 MULTIPOLYGON() #&gt; 3 US United States 259740511 6.17 MULTIPOLYGON(((-155.54211 1... The output shows that the result, right_join1, has information about Mexico, but drops information about Greenland. Furthermore, our right object, as a data.frame, doesn’t have a geometry representation of Mexico. As a result, the right_join1 object contains only non-spatial data of Mexico. It could be easily illustrated using the plot function: plot(right_join1[0]) # Canada and United States only % --> % plot() --> 3.4.3 Inner joins The inner_join() keeps only observations from the left object (north_america) where there are matching observations in the right object (wb_north_america). Additionally, all columns from the left and right object are kept: inner_join1 = north_america %&gt;% inner_join(wb_north_america, by = c(&quot;iso_a2&quot;, &quot;name_long&quot; = &quot;name&quot;)) inner_join1 #&gt; Simple feature collection with 2 features and 4 fields #&gt; geometry type: MULTIPOLYGON #&gt; dimension: XY #&gt; bbox: xmin: -171.7911 ymin: 18.91619 xmax: -52.6481 ymax: 83.23324 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs #&gt; iso_a2 name_long urban_pop unemploy geom #&gt; 1 CA Canada 29022137 6.91 MULTIPOLYGON(((-63.6645 46.... #&gt; 2 US United States 259740511 6.17 MULTIPOLYGON(((-155.54211 1... % --> 3.4.4 Semi joins The semi_join() is very similar to the inner_join(). It also keeps only observations from the left object (north_america) where there are matching observations in the right object, but keeping just columns from the left one: semi_join1 = north_america %&gt;% semi_join(wb_north_america, by = &quot;iso_a2&quot;) semi_join1 #&gt; Simple feature collection with 2 features and 2 fields #&gt; geometry type: MULTIPOLYGON #&gt; dimension: XY #&gt; bbox: xmin: -171.7911 ymin: 18.91619 xmax: -52.6481 ymax: 83.23324 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs #&gt; iso_a2 name_long geom #&gt; 1 CA Canada MULTIPOLYGON(((-63.6645 46.... #&gt; 2 US United States MULTIPOLYGON(((-155.54211 1... % --> 3.4.5 Anti joins The anti_join() returns all rows from the left object that are not matching observations in the right object. Only columns from the right object are kept: anti_join1 = north_america %&gt;% anti_join(wb_north_america, by = &quot;iso_a2&quot;) anti_join1 #&gt; Simple feature collection with 1 feature and 2 fields #&gt; geometry type: MULTIPOLYGON #&gt; dimension: XY #&gt; bbox: xmin: -73.297 ymin: 60.03676 xmax: -12.20855 ymax: 83.64513 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs #&gt; iso_a2 name_long geom #&gt; 1 GL Greenland MULTIPOLYGON(((-46.76379 82... plot(anti_join1[0]) % --> 3.4.6 Full joins The full_join() returns all rows and all columns from both the left and right object. It also puts NA in cases where there are not matching values and returns an empty geometry for cases that only exist in the right object: full_join1 = north_america %&gt;% full_join(wb_north_america, by = &quot;iso_a2&quot;) full_join1 #&gt; Simple feature collection with 4 features and 5 fields (with 1 geometry empty) #&gt; geometry type: MULTIPOLYGON #&gt; dimension: XY #&gt; bbox: xmin: -171.7911 ymin: 18.91619 xmax: -12.20855 ymax: 83.64513 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs #&gt; iso_a2 name_long name urban_pop unemploy #&gt; 1 CA Canada Canada 29022137 6.91 #&gt; 2 GL Greenland &lt;NA&gt; NA NA #&gt; 3 US United States United States 259740511 6.17 #&gt; 4 MX &lt;NA&gt; Mexico 99018446 5.25 #&gt; geom #&gt; 1 MULTIPOLYGON(((-63.6645 46.... #&gt; 2 MULTIPOLYGON(((-46.76379 82... #&gt; 3 MULTIPOLYGON(((-155.54211 1... #&gt; 4 MULTIPOLYGON() % --> % plot() --> 3.4.7 Exercises 3.5 Attribute data creation It is often the case when a new column needs to be created based on existing columns. For example, we want to calculate population density for each country. We need to divide a pop column (population) by a area_km2 column (unit area in square km). It could be done this way in base R: world_new &lt;- world # not to overwrite our original data world_new$pop_dens = world_new$pop / world_new$area_km2 Alternatively, we can use one of dplyr functions - mutate() or transmute(). mutate() adds new columns at second-to-last position in the sf object (the last one is reserved for the geometry): world %&gt;% mutate(pop_dens = pop / area_km2) The difference between mutate() and transmute() is that the latter do not preserve existing columns: world %&gt;% transmute(pop_dens = pop / area_km2) Existing columns could be also paste together using unite(). For example, we want to stick together continent and region_un columns into a new con_reg column. We could specify a separator to use between values and if input columns should be removed: world_unite = world %&gt;% unite(con_reg, continent:region_un, sep = &quot;:&quot;, remove = TRUE) The separate() function is the complement of the unite() function. Its role is to split one column into multiple columns using either a regular expression or character position. world_separate = world_unite %&gt;% separate(con_reg, c(&quot;continent&quot;, &quot;region_un&quot;), sep = &quot;:&quot;) Two helper functions, rename() and set_names can be used to change columns names. The first one, rename() replace an old name with a new one. For example, we want to change a name of column from name_long to name: world %&gt;% rename(name = name_long) set_names can be used to change names of many columns. In this function, we do not need to provide old names: new_names = c(&quot;ISO_A2&quot;, &quot;Name&quot;, &quot;Continent&quot;, &quot;Region&quot;, &quot;Subregion&quot;, &quot;Country_type&quot;, &quot;Area_in_km2&quot;, &quot;Population&quot;, &quot;Life_Expectancy&quot;, &quot;GDP_per_capita&quot;, &quot;geom&quot;) world %&gt;% set_names(new_names) 3.5.1 Exercises 3.6 Removing spatial information It is important to note that the attribute data operations preserve the geometry of the simple features. As mentioned at the outset of the chapter, however, it can be useful to remove the geometry. In the case of the world dataset we’ve been using, this can be done using st_set_geometry()9. world_data = world %&gt;% st_set_geometry(NULL) class(world_data) #&gt; [1] &quot;data.frame&quot; References "],
["spatial-data-operations.html", "4 Spatial data operations Prerequisites 4.1 Introduction 4.2 Spatial subsetting 4.3 Spatial data aggregation 4.4 Spatial data joining 4.5 Spatial data creation", " 4 Spatial data operations Prerequisites This chapter requires tidyverse, sf, units, and spData packages: library(sf) library(tidyverse) library(units) You must have loaded the world data from the spData package: library(spData) data(&quot;world&quot;) 4.1 Introduction 4.2 Spatial subsetting Spatial subsetting is the spatial equivalent of attribute subsetting, the process of creating a new object by selecting only rows whose attributes match certain criteria. In section 3.2 we saw how rows could be subsetted based on their index (e.g. world[1:6,]) or some critera (e.g. world[world$area_km2 &lt; 10000,]). 4.2.1 Topological relations (2) --> a1 = st_polygon(list(rbind(c(-1, -1), c(1, -1), c(1, 1), c(-1, -1)))) a2 = st_polygon(list(rbind(c(2, 0), c(2, 2), c(3, 2), c(3, 0), c(2, 0)))) a = st_sfc(a1, a2) b1 = a1 * 0.5 b2 = a2 * 0.4 + c(1, 0.5) b = st_sfc(b1, b2) l1 = st_linestring(x = matrix(c(0, 3, -1, 1), , 2)) l2 = st_linestring(x = matrix(c(-1, -1, -0.5, 1), , 2)) l = st_sfc(l1, l2) p = st_multipoint(x = matrix(c(0.5, 1, -1, 0, 1, 0.5), , 2)) plot(a, border = &quot;red&quot;, axes = TRUE) plot(b, border = &quot;green&quot;, add = TRUE) plot(l, add = TRUE) plot(p, add = TRUE) Equals: st_equals(a, b, sparse = FALSE) Contains: st_contains(a, b, sparse = FALSE) st_contains_properly(a, b, sparse = FALSE) Covers: st_covers(a, b, sparse = FALSE) st_covered_by(a, b, sparse = FALSE) Whithin: st_within(a, b, sparse = FALSE) Overlaps: st_overlaps(a, b, sparse = FALSE) Intersects: st_intersects(a, b, sparse = FALSE) Disjoint: st_disjoint(a, b, sparse = FALSE) Touches: st_touches(a, b, sparse = FALSE) Crosses: st_crosses(a, b, sparse = FALSE) DE9-IM - https://en.wikipedia.org/wiki/DE-9IM st_relate(a, b, sparse = FALSE) 4.2.2 Distance relations st_distance(a, b) 4.2.3 Spatial clipping Spatial clipping is a form of spatial subsetting that involves changes to the geometry columns of at least some of the affected features. Clipping can only apply to features more complex than points: lines, polygons and their ‘multi’ equivalents. To illustrate the concept we will start with a simple example: two overlapping circles with a centrepoint 1 unit away from each other and radius of 1: b = st_sfc(st_point(c(0, 1)), st_point(c(1, 1))) # create 2 points b = st_buffer(b, dist = 1) # convert points to circles l = c(&quot;x&quot;, &quot;y&quot;) plot(b) text(x = c(-0.5, 1.5), y = 1, labels = l) # add text Figure 4.1: Overlapping circles. Imagine you want to select not one circle or the other, but the space covered by both x and y. This can be done using the function st_intersection(), illustrated using objects named x and y which represent the left and right-hand circles: x = b[1] y = b[2] x_and_y = st_intersection(x, y) plot(b) plot(x_and_y, col = &quot;lightgrey&quot;, add = TRUE) # color intersecting area The subsequent code chunk demonstrate how this works for all combinations of the ‘venn’ diagram representing x and y, inspired by Figure 5.1 of the book R for Data Science (Grolemund and Wickham 2016). Figure 4.2: Spatial equivalents of logical operators To illustrate the relationship between subsetting and clipping spatial data, we will subset points that cover the bounding box of the circles x and y in Figure 4.2. Some points will be inside just one circle, some will be inside both and some will be inside neither. To generate the points will use a function not yet covered in this book, st_sample(). There are two different ways to subset points that fit into combinations of the circles: via clipping and logical operators. But first we must generate some points. We will use the simple random sampling strategy to sample from a box representing the extent of x and y, using the code below to generate the situation plotted in Figure 4.3: bb = st_bbox(st_union(x, y)) pmat = matrix(c(bb[c(1, 2, 3, 2, 3, 4, 1, 4, 1, 2)]), ncol = 2, byrow = TRUE) box = st_polygon(list(pmat)) set.seed(2017) p = st_sample(x = box, size = 10) plot(box) plot(x, add = T) plot(y, add = T) plot(p, add = T) text(x = c(-0.5, 1.5), y = 1, labels = l) Figure 4.3: Randomly distributed points within the bounding box enclosing circles x and y. 4.2.4 Exercises Write code that subsets points that are contained within x and y (illustrated by the plot in the 2nd row and the 1st column in Figure 4.2). Create a randomly located point with the command st_point() (refer back to section 2.1.4.2 to see how to create spatial data ‘from scratch’). scattered points with the command 4.3 Spatial data aggregation 4.4 Spatial data joining save as GPKG? --> 4.5 Spatial data creation # add a new column world$area = set_units(st_area(world), value = km^2) world$pop_density = world$pop / world$area # OR world = world %&gt;% mutate(area = set_units(st_area(.), value = km^2)) %&gt;% mutate(pop_density = pop / area) Note that this has created a attributes for the area and population density variables: attributes(world$area) #&gt; $units #&gt; $numerator #&gt; [1] &quot;km&quot; &quot;km&quot; #&gt; #&gt; $denominator #&gt; character(0) #&gt; #&gt; attr(,&quot;class&quot;) #&gt; [1] &quot;symbolic_units&quot; #&gt; #&gt; $class #&gt; [1] &quot;units&quot; attributes(world$pop_density) #&gt; $units #&gt; $numerator #&gt; character(0) #&gt; #&gt; $denominator #&gt; [1] &quot;km&quot; &quot;km&quot; #&gt; #&gt; attr(,&quot;class&quot;) #&gt; [1] &quot;symbolic_units&quot; #&gt; #&gt; $class #&gt; [1] &quot;units&quot; These can be set to NULL as follows: attributes(world$area) = NULL attributes(world$pop_density) = NULL References "],
["read-write.html", "5 Geographic data I/O 5.1 Data Input (I) 5.2 Data output (O) 5.3 File formats 5.4 Visual outputs 5.5 Exercises", " 5 Geographic data I/O The previous chapters provided an overview of spatial data classes in R, with a focus on simple features. This chapter is about getting spatial data onto your computer and then, perhaps after processing it with techniques described in this book, back out to the world. We include a section (5.4) on visualization because outputting data in a human (not just computer) readable format enables non-programmers to benefit from your work. If your aim is to use geocomputation to improve the world, e.g. by encouraging evidence-based policies, this final stage is vital. I/O is short for “input/output” which means, in plain English, “reading and writing data”. We use the acronym instead of plain English not to confuse you or to make chapter names short, but because that’s the term used in computer science and it is useful to think of data import and export from a computing perspective.10 5.1 Data Input (I) To efficiently read data into R, it helps to have an understanding of what happens ‘under the hood’. Executing commands such as sf::st_read() (the main function we use for loading spatial data, from the sf package) or readr::read_csv() silently sets off a chain of events that loads objects. “Loading” in this context means loading the data into R or, more precisely, assigning objects to your workspace, stored in RAM accessible from the .GlobalEnv of your current R session. Spatial data comes in a wide variety of file formats, and sf is able to handle most of them via its st_read() command. Behind the scences it uses GDAL, which supports the import of a very wide range of spatial data formats. The first arguement of st_read() is file, which should be a text string or an object containing a single text string: library(sf) #&gt; Linking to GEOS 3.5.0, GDAL 2.1.0, proj.4 4.8.0 f = system.file(&quot;shapes/world.gpkg&quot;, package = &quot;spData&quot;) world = st_read(f) #&gt; Reading layer `wrld.gpkg&#39; from data source `/home/travis/R/Library/spData/shapes/world.gpkg&#39; using driver `GPKG&#39; #&gt; Simple feature collection with 177 features and 10 fields #&gt; geometry type: MULTIPOLYGON #&gt; dimension: XY #&gt; bbox: xmin: -180 ymin: -90 xmax: 180 ymax: 83.64513 #&gt; epsg (SRID): 4326 #&gt; proj4string: +proj=longlat +datum=WGS84 +no_defs Tip: read_sf() and write_sf() can be used as easy-to-remember alternatives to st_read() and st_write(). Remember they hide information about the data source and overwrite existing data, though. A major advantage of sf is that it is fast. To demonstrate this, we will use a function to compare st_read with its sp equivalent, rgdal::readOGR: bench_read = function(file, n) { m = microbenchmark(times = n, rgdal::readOGR(f), st_read(f) ) mean(m$time[1:n]) / mean(m$time[(n + 1):(n * 2)]) } This function takes as arguments an input file (file) and a number of times to run each command (n) and returns how many times faster st_read() is than readOGR(). Let’s run the benchmark for the world.gpkg file represented by the object f: library(microbenchmark) read_world_gpkg = bench_read(file = f, n = 5) read_world_gpkg #&gt; [1] 2.34 The results demonstrate that sf was around 2 times faster than rgdal at reading-in the world countries shapefile. The relative performance of st_read() compared with other functions will vary depending on file format and the nature of the data. To illustrate this point, we performed the same operation on a geojson file and found a greater speed saving: f = system.file(&quot;shapes/lnd.geojson&quot;, package = &quot;spData&quot;) read_lnd_geojson = bench_read(file = f, n = 5) read_lnd_geojson #&gt; [1] 3.08 In this case sf was around 3 times faster than rgdal. To find out which data formats sf supports, run st_drivers(). Here, we show only the first two drivers: sf_drivers = st_drivers() head(sf_drivers, n = 2) #&gt; name long_name write copy is_raster is_vector #&gt; PCIDSK PCIDSK PCIDSK Database File TRUE FALSE TRUE TRUE #&gt; netCDF netCDF Network Common Data Format TRUE TRUE TRUE TRUE 5.2 Data output (O) The counterpart of st_read() is st_write(). It allows to write sf objects to a wide range of geographic vector file formats, including the most common ones such as .geojson, .shp and .gpkg. Based on the file name st_write() decides automatically which driver to use. How fast the writing process is depends also on the driver: system.time(st_write(world, &quot;world.geojson&quot;, quiet = TRUE)) #&gt; user system elapsed #&gt; 0.068 0.000 0.072 system.time(st_write(world, &quot;world.shp&quot;, quiet = TRUE)) #&gt; user system elapsed #&gt; 0.040 0.000 0.043 system.time(st_write(world, &quot;world.gpkg&quot;, quiet = TRUE)) #&gt; user system elapsed #&gt; 0.008 0.020 0.029 Note: if you try to write to the same data source again, the function will fail. This is demonstrated in the code below for a modified version of the world in which the population doubles in all countries (don’t worry about the dplyr code for now, this is covered in Chapter 3): world_mod = dplyr::mutate(world, pop = pop * 2) st_write(obj = world_mod, dsn = &quot;world.gpkg&quot;) ## GDAL Error 1: Layer world.gpkg already exists, CreateLayer failed. ## Use the layer creation option OVERWRITE=YES to replace it. The error message (only partly reproduced above) provides some information as to why the function failed. The GDAL Error 1 statement makes clear that the failure occured at the GDAL level. Additionally, the suggestion to use OVERWRITE=YES provides a clue how to fix the problem. However, this is a GDAL option, and not a st_write() argument. Luckily, st_write provides a layer_options argument through which we can pass driver-dependent options: st_write(obj = world_mod, dsn = &quot;world.gpkg&quot;, layer_options = &quot;OVERWRITE=YES&quot;) Another solution is to use the st_write() argument delete_layer. Setting it to TRUE deletes already existing layers in the data source before the function attempts to write (note there is also a delete_dsn argument): st_write(obj = world_mod, dsn = &quot;world.gpkg&quot;, delete_layer = TRUE) You can achieve the same with write_sf() since it is equivalent to (technically an alias for) st_write(), except that its defaults for delete_layer and quiet is TRUE. This enables spatial data to be overwritten more concisely, and with less output going to screen: write_sf(obj = world_mod, dsn = &quot;world.gpkg&quot;) A blunter way to update file-based geographic data sources such as .gpkg files is to simply delete them. This is not generally recommended, as it will not work for multi-file data sources such as .shp files: file.remove(&quot;world.gpkg&quot;) 5.3 File formats 5.4 Visual outputs 5.5 Exercises Name three differences between write_sf() and the more well-known function st_write(). What are the default arguments of read_sf() and write_sf() that enable two of these differences? Concepts such as computational efficiency, hard disk space and ‘idempotence’ are useful when thinking about reading and writing geographic datasets, which can become large and difficult to handle. Loading/saving data is yet another way of saying the same thing.↩ "],
["references.html", "6 References", " 6 References "]
]
